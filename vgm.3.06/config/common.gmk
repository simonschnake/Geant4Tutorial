# $Id: common.gmk 543 2007-05-23 08:49:24Z ivana $

# -----------------------------------------------------------------------
# The makefile for the Virtual Geometry Model
# Copyright (C) 2007, Ivana Hrivnacova               
# All rights reserved. 
#           
# For the licensing terms see vgm/LICENSE.
# Contact: ivana@ipno.in2p3.fr
# -----------------------------------------------------------------------

# Based on Geant4 makefile:
#
# Id: common.gmk,v 1.30 2001/06/25 10:58:51 morita Exp 
# ----------------------------------------------------------------
# Common part of GNUmakefile for libraries.  John Allison, 5/7/95.
# ----------------------------------------------------------------
# Libraries are created according to VGM_SYSTEM. G.Cosmo, 11/6/96.
# Introduced VGM_LIBDIR and VGM_TMPDIR. G.Cosmo, 23/6/98.
# Introduced G4SCHEMA_HEADER_DIR and G4SCHEMA_SRC_DIR. Y.Morita, 16/11/99.
# Actual targets splitted into common_kernel.gmk and common_objy.gmk,
#                                                      Y.Morita, 15/3/01.

ifndef VGM_LIBDIR
  VGM_LIBDIR := $(VGM_LIB)/$(VGM_SYSTEM)
endif
VGM_TMPDIR := $(VGM_TMP)/$(VGM_SYSTEM)/$(name)

sources := $(wildcard *.cxx)
objects := $(patsubst %.cxx,$(VGM_TMPDIR)/%.o,$(sources))
dependencies := $(patsubst %.cxx,$(VGM_TMPDIR)/%.d,$(sources))

   mplibraries_to_build :=
ifneq ($(VGM_LIB_BUILD_SHARED),)
   mplibraries_to_build += $(VGM_LIBDIR)/lib$(name).$(SHEXT)
endif
ifneq ($(VGM_LIB_BUILD_STATIC),)
   mplibraries_to_build += $(VGM_LIBDIR)/lib$(name).a
endif

# GPPFLAGS is defined here to make the .d file(s) and include it(them).
# This variable is actually used in common_kernel.gmk and common_objy.gmk.

GPPFLAGS := "-M"

###############################################################################
#
# Actual gmake targets.
#

lib: $(mplibraries_to_build)

ifneq ($(VGM_LIB_BUILD_SHARED),)
# Make shared library.
$(VGM_LIBDIR)/lib$(name).$(SHEXT): $(VGM_TMPDIR)/obj.last
	@if [ ! -d $(VGM_LIBDIR) ] ; then mkdir $(VGM_LIBDIR) ;fi
	@echo Creating shared library $@
	@$(RM) $@
#      use architecture specific macro defined in sys/$(VGM_SYSTEM).gmk
	$(build-granular-shared-lib)
endif

ifneq ($(VGM_LIB_BUILD_STATIC),)
# Make static (archive) library.
$(VGM_LIBDIR)/lib$(name).a: $(VGM_TMPDIR)/obj.last
	@if [ ! -d $(VGM_LIBDIR) ] ; then mkdir $(VGM_LIBDIR) ;fi
	@echo Creating/replacing object files in $(VGM_LIBDIR)/lib$(name).a
	@rm -f $(VGM_LIBDIR)/lib$(name).a
	@$(AR) $(OUT_LIB)$(VGM_LIBDIR)/lib$(name).a $(VGM_TMPDIR)/*.o
	@if [ -f /usr/bin/ranlib -o -f /bin/ranlib ] ; then ranlib $(VGM_LIBDIR)/lib$(name).a ;fi
endif

###############################################################################
#
# Actual targets for .o, .d files and others are defined in
# common_kernel.gmk and common_objy.gmk.
#

$(VGM_TMPDIR)/%.o: %.cxx
ifdef CPPVERBOSE
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(OUT_OBJ)$(VGM_TMPDIR)/$(*F).o $*.cxx
else
	@echo Compiling $*.cxx ...
	@$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(OUT_OBJ)$(VGM_TMPDIR)/$(*F).o $*.cxx
endif

# .PHONY targets are executed regardless of time-stamp of any file of
# same name.
.PHONY: all obj lib clean clean_libs includes

obj: $(VGM_TMPDIR)/obj.last
# include $(VGM_INSTALL)/config/common_kernel.gmk

###############################################################################

# Touch the versioning file
$(VGM_TMPDIR)/obj.last: $(objects)
	@touch $@

# Make the .d file(s) and include it(them).
# g++ -MM (or -M) is good at this, except it forgets the subdirectory
# (hence the use of $VGM_TMP/).

$(VGM_TMPDIR)/%.d: %.cxx 
	@echo Making dependency for file $< ...
	@if [ ! -d $(VGM_TMPDIR) ] ; then mkdir -p $(VGM_TMPDIR)  ;fi
	@($(ECHO) $(VGM_TMPDIR)/\\c ; \
	g++ $(GPPFLAGS) $(CPPFLAGS) $< ) | sed 's!$(VGM_TMPDIR)/$*.o!& $@!' >$@
ifneq ($(dependencies),)
-include $(dependencies)
endif

#
# Installation of include files
#
installed_includes:=$(foreach file,$(wildcard include/*),$(shell test -f $(file) && echo $(file)))
installed_includes:=$(patsubst include/%,$(VGM_INCLUDE)/%,$(installed_includes))

# NOTE: the double colon rule allows to add other rules for the same target
#
includes::	$(installed_includes)

# Static Pattern rules, see GNU make manual for details.
#           target(s): target-pattern : dep-pattern	
#
$(installed_includes): $(VGM_INCLUDE)/% : include/%
	@cp -p $< $@

#
# Clean up libraries
#
ifndef VGM_EXLIB
clean:
	@echo Cleaning up ...
	@rm -f $(VGM_LIBDIR)/lib$(name).a
	@rm -f $(VGM_LIBDIR)/lib$(name).$(SHEXT)
	@rm -rf $(VGM_TMPDIR)
endif

clean_libs:
	@if [ -f $(VGM_LIBDIR)/lib$(name).a ] ; then \
	$(ECHO) Removing library lib$(name).a ... ; \
	$(RM) -f $(VGM_LIBDIR)/lib$(name).a ; fi
	@if [ -f $(VGM_LIBDIR)/lib$(name).$(SHEXT) ] ; then \
	$(ECHO) Removing library lib$(name).$(SHEXT) ... ; \
	$(RM) -f $(VGM_LIBDIR)/lib$(name).$(SHEXT) ; fi

